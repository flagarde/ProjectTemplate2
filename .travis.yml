language: cpp
os: linux
dist: bionic

arch:
  - amd64

env:
  global:
    - ROOT_VERSION=6.20.04

jobs:
  fast_finish: true
  allow_failures:
     - os: osx
     - os: windows
  include:
    - os: osx
      compiler: clang
      osx_image: xcode11.4
    - os: linux
      compiler: clang
      dist: bionic
    - os: linux
      compiler: gcc
      dist: bionic
    - os: windows
addons:
  apt:
    packages:
        - g++-9
        - llvm-10-dev
        - libclang-10-dev
        - clang-format-10
        - clang-tidy-10
        - cmake
        - lcov
        - doxygen
    sources:
      - ubuntu-toolchain-r-test
      - llvm-toolchain-bionic-10
      - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'
        key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'

  homebrew:
    packages:
      - cmake
      - gcc@9
      - doxygen
      - lcov
      - openssl@1.1
      - llvm@10
      - ninja
    update: true

#before_install:
  #- ./.travis-ci.d/install_dependencies.sh

install:
# The following Homebrew packages aren't linked by default, and need to be
# prepended to the path explicitly.
- if [ "$TRAVIS_OS_NAME" = "osx" ]; then export PATH="$(brew --prefix llvm)/bin:$PATH"; brew link --force openssl ; export PKG_CONFIG_PATH="/usr/local/opt/openssl@1.1/lib/pkgconfig" ; pkg-config --modversion openssl ; fi
# /usr/bin/gcc points to an older compiler on both Linux and macOS.
- if [ "$CXX" = "g++" ]; then export CXX="g++-9" CC="gcc-9"; fi
- if [ "$TRAVIS_OS_NAME" = "windows" ]; then choco install python; fi
# /usr/bin/clang points to an older compiler on both Linux and macOS.
#
# Homebrew's llvm package doesn't ship a versioned clang++ binary, so the values
# below don't work on macOS. Fortunately, the path change above makes the
# default values (clang and clang++) resolve to the correct compiler on macOS.
- if [ "$TRAVIS_OS_NAME" = "linux" ]; then if [ "$CXX" = "clang++" ]; then export CXX="clang++-10" CC="clang-10"; fi; fi

script:
    #- source dependencies/root/bin/thisroot.sh
    - mkdir build
    - cd build
    - if [ "$TRAVIS_OS_NAME" == "osx" ]; then cmake -DCODE_COVERAGE=OFF -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../bin .. ; cmake --build . ; fi
    - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$TRAVIS_COMPILER" == "clang" ]; then cmake -DCODE_COVERAGE=OFF -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../bin .. ; cmake --build . ; fi
    - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$TRAVIS_COMPILER" == "gcc" ]; then cmake -DCODE_COVERAGE=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../bin .. ; cmake --build . --config Debug -- -j $(nproc) ; fi
    - if [ "$TRAVIS_OS_NAME" == "windows" ]; then cmake -G "Visual Studio 15 2017" -A x64 .. ; cmake --build . ; fi
    - cmake --install .
    # - make test
    # - make docs

after_success:
 - ctest -j $(nproc) --output-on-failure
# Create lcov report
# capture coverage info
 - lcov --directory . --capture --output-file coverage.info
# filter out system and extra files.
# To also not include test code in coverage add them with full path to the patterns: '*/tests/*'
 - lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
# output coverage data for debugging (optional)
 - lcov --list coverage.info
# Uploading to CodeCov
# '-f' specifies file(s) to use and disables manual coverage gathering and file search which has already been done above
 - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"

# Don't send e-mail notifications
notifications:
  email:
    on_success: never
    on_failure: never

#notifications:
#  email:
#    - kosrok97@gmail.com
